"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/object/index.ts
var object_exports = {};
__export(object_exports, {
  invert: () => invert,
  omit: () => omit,
  omitBy: () => omitBy,
  pick: () => pick,
  pickBy: () => pickBy
});
module.exports = __toCommonJS(object_exports);

// src/object/omit.ts
function omit(obj, keys) {
  const result = __spreadValues({}, obj);
  for (const key of keys) {
    delete result[key];
  }
  return result;
}

// src/object/omitBy.ts
function omitBy(obj, shouldOmit) {
  const result = {};
  for (const [key, value] of Object.entries(obj)) {
    if (shouldOmit(value, key)) {
      continue;
    }
    result[key] = value;
  }
  return result;
}

// src/object/pick.ts
function pick(obj, keys) {
  const result = {};
  for (const key of keys) {
    result[key] = obj[key];
  }
  return result;
}

// src/object/pickBy.ts
function pickBy(obj, shouldPick) {
  const result = {};
  for (const [key, value] of Object.entries(obj)) {
    if (!shouldPick(value, key)) {
      continue;
    }
    result[key] = value;
  }
  return result;
}

// src/object/invert.ts
function invert(obj) {
  const result = {};
  for (const key in obj) {
    const value = obj[key];
    result[value] = key;
  }
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  invert,
  omit,
  omitBy,
  pick,
  pickBy
});
//# sourceMappingURL=index.js.map