"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/array/xorBy.ts
var xorBy_exports = {};
__export(xorBy_exports, {
  xorBy: () => xorBy
});
module.exports = __toCommonJS(xorBy_exports);

// src/array/differenceBy.ts
function differenceBy(firstArr, secondArr, mapper) {
  const mappedSecondSet = new Set(secondArr.map((item) => mapper(item)));
  return firstArr.filter((item) => {
    return !mappedSecondSet.has(mapper(item));
  });
}

// src/array/intersectionBy.ts
function intersectionBy(firstArr, secondArr, mapper) {
  const mappedSecondSet = new Set(secondArr.map(mapper));
  return firstArr.filter((item) => mappedSecondSet.has(mapper(item)));
}

// src/array/unionBy.ts
function unionBy(arr1, arr2, mapper) {
  const map = /* @__PURE__ */ new Map();
  for (const item of [...arr1, ...arr2]) {
    const key = mapper(item);
    if (!map.has(key)) {
      map.set(key, item);
    }
  }
  return Array.from(map.values());
}

// src/array/xorBy.ts
function xorBy(arr1, arr2, mapper) {
  const union = unionBy(arr1, arr2, mapper);
  const intersection = intersectionBy(arr1, arr2, mapper);
  return differenceBy(union, intersection, mapper);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  xorBy
});
//# sourceMappingURL=xorBy.js.map