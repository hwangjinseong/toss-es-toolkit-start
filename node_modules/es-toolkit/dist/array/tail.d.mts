/**
 * Returns an empty array when the input is a single-element array.
 *
 * @param {readonly [T]} arr - The single-element array to process.
 * @returns {[]} An empty array.
 *
 * @example
 * const arr = [1];
 * const result = tail(arr);
 * // result will be []
 */
declare function tail<T>(arr: readonly [T]): [];
/**
 * Returns an empty array when the input is an empty array.
 *
 * @param {readonly []} arr - The empty array to process.
 * @returns {[]} An empty array.
 *
 * @example
 * const arr = [];
 * const result = tail(arr);
 * // result will be []
 */
declare function tail(arr: readonly []): [];
/**
 * Returns a new array with all elements except for the first when the input is a tuple array.
 *
 * @param {readonly [T, ...U[]]} arr - The tuple array to process.
 * @returns {U[]} A new array containing all elements of the input array except for the first one.
 *
 * @example
 * const arr = [1, 2, 3];
 * const result = tail(arr);
 * // result will be [2, 3]
 */
declare function tail<T, U>(arr: readonly [T, ...U[]]): U[];

export { tail };
