"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/array/xor.ts
var xor_exports = {};
__export(xor_exports, {
  xor: () => xor
});
module.exports = __toCommonJS(xor_exports);

// src/array/difference.ts
function difference(firstArr, secondArr) {
  const secondSet = new Set(secondArr);
  return firstArr.filter((item) => !secondSet.has(item));
}

// src/array/intersection.ts
function intersection(firstArr, secondArr) {
  const secondSet = new Set(secondArr);
  return firstArr.filter((item) => {
    return secondSet.has(item);
  });
}

// src/array/uniq.ts
function uniq(arr) {
  return Array.from(new Set(arr));
}

// src/array/union.ts
function union(arr1, arr2) {
  return uniq(arr1.concat(arr2));
}

// src/array/xor.ts
function xor(arr1, arr2) {
  return difference(union(arr1, arr2), intersection(arr1, arr2));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  xor
});
//# sourceMappingURL=xor.js.map