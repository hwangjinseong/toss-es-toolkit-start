"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/array/xorWith.ts
var xorWith_exports = {};
__export(xorWith_exports, {
  xorWith: () => xorWith
});
module.exports = __toCommonJS(xorWith_exports);

// src/array/differenceWith.ts
function differenceWith(firstArr, secondArr, areItemsEqual) {
  return firstArr.filter((firstItem) => {
    return secondArr.every((secondItem) => {
      return !areItemsEqual(firstItem, secondItem);
    });
  });
}

// src/array/intersectionWith.ts
function intersectionWith(firstArr, secondArr, areItemsEqual) {
  return firstArr.filter((firstItem) => {
    return secondArr.some((secondItem) => {
      return areItemsEqual(firstItem, secondItem);
    });
  });
}

// src/array/uniqWith.ts
function uniqWith(arr, areItemsEqual) {
  const result = [];
  for (const item of arr) {
    const isUniq = result.every((v) => !areItemsEqual(v, item));
    if (isUniq) {
      result.push(item);
    }
  }
  return result;
}

// src/array/unionWith.ts
function unionWith(arr1, arr2, areItemsEqual) {
  return uniqWith(arr1.concat(arr2), areItemsEqual);
}

// src/array/xorWith.ts
function xorWith(arr1, arr2, areElementsEqual) {
  const union = unionWith(arr1, arr2, areElementsEqual);
  const intersection = intersectionWith(arr1, arr2, areElementsEqual);
  return differenceWith(union, intersection, areElementsEqual);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  xorWith
});
//# sourceMappingURL=xorWith.js.map