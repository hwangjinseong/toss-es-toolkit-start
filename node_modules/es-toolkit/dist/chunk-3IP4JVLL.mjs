// src/function/debounce.ts
function debounce(func, debounceMs, { signal } = {}) {
  let timeoutId = null;
  const debounced = function(...args) {
    if (timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    if (signal == null ? void 0 : signal.aborted) {
      return;
    }
    timeoutId = setTimeout(() => {
      func(...args);
      timeoutId = null;
    }, debounceMs);
  };
  const onAbort = function() {
    debounced.cancel();
  };
  debounced.cancel = function() {
    if (timeoutId !== null) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  signal == null ? void 0 : signal.addEventListener("abort", onAbort, { once: true });
  return debounced;
}

export {
  debounce
};
//# sourceMappingURL=chunk-3IP4JVLL.mjs.map